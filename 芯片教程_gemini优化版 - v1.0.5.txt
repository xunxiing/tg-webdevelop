《甜瓜游乐场》芯片模块指南 (v27.5) 

 前言 

您好，创造者！

欢迎阅读由  甜瓜联合科技  为您准备的《甜瓜游乐场》芯片模块指南。
芯片是实现您创意的强大工具。这份指南汇集了我们对芯片系统的理解与经验，旨在帮助您快速掌握各类模块的功能与用法，在创造之路上少走弯路。我们甜瓜联合科技相信联合社区的力量能激发无限可能。这份指南不仅是我们的知识分享，更是希望促进玩家间的交流与互助，点燃集体智慧的火花。我们鼓励您探索、实践，并将您的奇思妙想分享给更多同好。

为了方便大家交流讨论、分享作品、寻求帮助，欢迎加入我们的  QQ 交流群：223577168 。让我们一起 联合 起来，共同探索芯片编程的乐趣！

 目录  (此为动态生成内容的结构概览)

1.  常量模块+输入输出
2.  变量模块 (Variables)
3.  数值计算 (Numerical Calculation)
4.  三角函数与角度 (Trigonometry & Angles)
5.  逻辑与比较 (Logic & Comparison)
6.  向量与颜色 (Vector & Color)
7.  位运算 (Bitwise Operations)
8.  实体操作 (Entity Operations)
9.  字符串操作 (String Operations)
10. 输入/传感器 (Input/Sensors)
11. 实用工具 (Utility)
12. 其他重要信息 (Data Types, Entity Usage, Node Colors)
13. 结语

---

 1. 常量模块 (Constants) 

输出固定的数值、文本或向量/颜色。

 1.1. `Constant (Decimal) (常量数值) 

 功能:  输出一个固定的数值 (数字)。
 输入:  无
 输出:  一个固定的 DECIMAL 值。
 使用:  在模块的属性里直接填好想要的数字，然后从唯一的输出端口获取这个数字。

 1.2. `Constant (String) (常量字符串) 

 功能:  输出一段固定的文本 (字符串)。
 输入:  无
 输出:  一个固定的 STRING 值。
 使用:  在模块的属性里输入想要的文字内容，然后从唯一的输出端口获取这段文字。

 1.3. `Constant (Vector) (常量向量/颜色) 

 功能:  输出一个固定的四维向量 (X, Y, Z, W)。
 输入:  无
 输出:  一个固定的 VECTOR 值。
 使用:  在模块的属性里分别设置好 X, Y, Z, W 四个数值，然后从唯一的输出端口获取这个四维向量。它可以用来代表坐标、方向，或者颜色 (RGBA 分别对应 X,Y,Z,W)。

1.4 INPUT (输入参数) 

 核心功能:  定义芯片的一个输入参数，允许从芯片外部或芯片内部的其他模块连接一个值到此参数。一个重要特性是，这类输入参数的值通常可以在游戏世界中直接调整（例如，当选中挂载芯片的实体时，在属性面板或通过特定的UI交互），而无需打开芯片编辑界面，为实时调试和参数微调提供了极大便利。这个值可以在芯片逻辑中使用。图片中展示了多种 INPUT 模块，它们可以接收不同数据类型的值。
 输入端口:  无 (其值由外部设定、直接调整或连接)。
 输出端口: 
    * `OUTPUT (NULL)` (紫色): 输出一个 NULL 实体引用。
    * `OUTPUT (0.00)` (蓝色): 输出一个数值 0.00。
    * `OUTPUT (NULL)` (黄色): 输出一个 NULL 字符串。
    * `OUTPUT (X:0 Y:0 Z:0 W:0)` (绿色): 输出一个零向量 (0,0,0,0)。
 参数设置:  每个 INPUT 模块可以在其属性中定义一个名称（例如 `#INPUT 1`），用于在芯片逻辑中识别和引用。同时，可以设置其数据类型（如图片所示，可以是实体、数值、字符串、向量）。
 使用方法: 
    1.  在芯片编辑器中添加 INPUT 模块。
    2.  根据需要，在模块属性中设置其名称和期望的数据类型。
    3.  从该模块的输出端口引出连接，将其值传递给芯片中的其他模块。
    4.  在游戏中使用芯片时，可以直接在游戏界面中（当选中实体并显示其可调参数时）为这些 INPUT 参数赋值，或通过芯片的属性面板设置。

 1.5. OUTPUT (输出端口) 

 核心功能:  定义芯片的一个输出端口，其核心作用是作为数据从  芯片内部  流向  芯片外部  的通道。芯片内部经过计算或处理得到的结果值，通过连接到此模块的输入端口，便可被芯片外部的其他系统、其他芯片或游戏逻辑读取和使用。它实现了芯片运算结果的对外“广播”或“暴露”。
 输入端口 (连接芯片内部的值): 
    * `INPUT (NULL)` (紫色): 接收一个来自芯片内部逻辑的实体引用，以供外部读取。
    * `INPUT (0.00)` (蓝色): 接收一个来自芯片内部逻辑的数值，以供外部读取。
    * `INPUT (NULL)` (黄色): 接收一个来自芯片内部逻辑的字符串，以供外部读取。
    * `INPUT (X:0 Y:0 Z:0 W:0)` (绿色): 接收一个来自芯片内部逻辑的向量，以供外部读取。
 输出端口 (面向芯片外部):  此模块本身不产生新的数据输出到芯片内部的其他模块；它的“输出”是定义了一个可供芯片外部读取的数据点。
 参数设置:  每个 OUTPUT 模块可以在其属性中定义一个名称（例如 `#OUTPUT 0` 或自定义如 `CurrentSpeed`)，这个名称非常重要，因为它是在芯片外部（如通过脚本查询、在其他芯片中引用此芯片的输出，或在游戏编辑器的属性检查器中查看）识别和获取这个特定输出值的关键。
 使用方法: 
    1.  在芯片编辑器中添加 OUTPUT 模块。
    2.  在模块属性中为其设置一个清晰、有意义的名称，方便外部引用。
    3.  将芯片内部逻辑中计算得到的、需要对外暴露的最终结果值（确保数据类型匹配）连接到该 OUTPUT 模块对应类型的输入端口。
    4.  之后，在游戏环境的其他地方（例如，另一个芯片、一段代码，或者某些游戏对象的属性）就可以通过这个 OUTPUT 模块的名称来访问或读取该芯片传递出来的值。

---

 3. 变量模块 (Variables)  (原第 2 大类，现为第 3 大类)

存储和管理芯片内部可变数据。

 3.1. `VARIABLE` 
    * (描述保持之前版本不变) ...

---

 然后，原教程中的： 
* `3. 数值计算 (Numerical Calculation)` 将变为 `4. 数值计算 (Numerical Calculation)`
* `4. 三角函数与角度 (Trigonometry & Angles)` 将变为 `5. 三角函数与角度 (Trigonometry & Angles)`
* 以此类推，所有后续章节的编号依次加 1。

这样调整后，`INPUT` 和 `OUTPUT` 作为芯片的核心数据交互方式，其重要性和独特性得到了更好的体现。你觉得这样的结构和描述如何？
 2. 变量模块 (Variables) 

存储和管理可变数据。

 2.1. `VARIABLE 

 核心功能:  用于存储一个可变的数值、字符串、向量或实体，并持续输出该值。
 输入端口: 
     INPUT:要存储的值 (DECIMAL, STRING, VECTOR, ENTITY)
     SET:控制信号 (DECIMAL)。当 `SET 为 1 时，更新存储的值；当 `SET 为 0 时，保持不变。
 输出端口: 
     VAR:当前存储的值 (DECIMAL, STRING, VECTOR, ENTITY)
 共享变量：  多个 `VARIABLE 模块可以指向同一个变量（例如，`#VARIABLE 1`），这意味着它们共享同一个存储空间。修改其中一个 `VARIABLE 模块的值，会影响到其他指向同一个变量的 `VARIABLE 模块。
 参数设置：  每个 `VARIABLE 模块都有一个参数，用于指定要存储的变量名称（例如，`#VARIABLE 1`）。
 特殊属性： 
    * 初始值： 创建时设置的默认值，一般为 0 或空。
 使用方法： 
    1.  （设置参数指定变量名）
    2.  连接 `INPUT 输入（要存储的值）。
    3.  连接 `SET 输入（控制更新）。
    4.  `SET`=1：持续更新存储的值。
    5.  `SET`=0：保持存储的值不变。
    6.  从 `VAR 输出读取当前存储的值。

 3. 数值计算 (Numerical Calculation) 

执行基础及高等数学运算。

 3.1. `ADD 

 功能:  将两个数值相加。
 输入: 
     A:第一个加数 (DECIMAL)。
     B:第二个加数 (DECIMAL)。
 输出: 
     A+B:A 和 B 的和 (DECIMAL)。
 使用方法: 
    1.  将需要相加的两个数值 (DECIMAL 类型) 连接到 `A 和 `B 输入。
    2.  从 `A+B 输出读取和 (DECIMAL 类型)。

 3.2. `SUBTRACT 

 功能:  将两个数值相减。
 输入: 
     A:被减数 (DECIMAL)。
     B:减数 (DECIMAL)。
 输出: 
     A-B:A 和 B 的差 (DECIMAL)。
 使用方法: 
    1.  将需要相减的两个数值 (DECIMAL 类型) 连接到 `A 和 `B 输入。
    2.  从 `A-B 输出读取差 (DECIMAL 类型)。

 3.3. `MULTIPLY 

 功能:  将两个数值相乘。
 输入: 
     A:第一个乘数 (DECIMAL)。
     B:第二个乘数 (DECIMAL)。
 输出: 
     A*B:A 和 B 的积 (DECIMAL)。
 使用方法: 
    1.  将需要相乘的两个数值 (DECIMAL 类型) 连接到 `A 和 `B 输入。
    2.  从 `A*B 输出读取积 (DECIMAL 类型)。

 3.4. `DIVIDE 

 功能:  将两个数值相除。
 输入: 
     A:被除数 (DECIMAL)。
     B:除数 (DECIMAL)。
 输出: 
     A/B:A 和 B 的商 (DECIMAL)。
 使用方法: 
    1.  将需要相除的两个数值 (DECIMAL 类型) 连接到 `A 和 `B 输入。
    2.  从 `A/B 输出读取商 (DECIMAL 类型)。

 3.5. `MODULO 

 功能:  计算两个数值相除的余数。
 输入: 
     A:被除数 (DECIMAL)。
     B:除数 (DECIMAL)。
 输出: 
     A%B:A 除以 B 的余数 (DECIMAL)。
 使用方法: 
    1.  将需要计算余数的两个数值 (DECIMAL 类型) 连接到 `A 和 `B 输入。
    2.  从 `A%B 输出读取余数 (DECIMAL 类型)。

 3.6. `POWER 

 功能:  计算一个数值的幂。
 输入: 
     A:底数 (DECIMAL)。
     B:指数 (DECIMAL)。
 输出: 
     A^B:A 的 B 次方 (DECIMAL)。
 使用方法: 
    1.  将底数 (DECIMAL 类型) 连接到 `A 输入，将指数 (DECIMAL 类型) 连接到 `B 输入。
    2.  从 `A^B 输出读取结果 (DECIMAL 类型)。

 3.7. `SQRT 

 功能:  计算一个数值的平方根。
 输入: 
     A:被开方数 (DECIMAL)。
 输出: 
     sqrt(A):A 的平方根 (DECIMAL)。
 使用方法: 
    1.  将需要计算平方根的数值 (DECIMAL 类型) 连接到 `A 输入。
    2.  从 `sqrt(A) 输出读取结果 (DECIMAL 类型)。

 3.8. `ABS 

 功能:  计算一个数值的绝对值。
 输入: 
     A:要求绝对值的数值 (DECIMAL)。
 输出: 
     abs(A):A 的绝对值 (DECIMAL)。
 使用方法: 
    1.  将需要计算绝对值的数值 (DECIMAL 类型) 连接到 `A 输入。
    2.  从 `abs(A) 输出读取结果 (DECIMAL 类型)。

 3.9. `ROUND 

 功能:  将一个数值四舍五入到最接近的整数。
 输入: 
     A:要四舍五入的数值 (DECIMAL)。
 输出: 
     round(A):A 四舍五入后的整数值 (DECIMAL)。
 使用方法: 
    1.  将需要四舍五入的数值 (DECIMAL 类型) 连接到 `A 输入。
    2.  从 `round(A) 输出读取结果 (DECIMAL 类型)。

 3.10. `FLOOR 

 功能:  将一个数值向下取整到最接近的整数。
 输入: 
     A:要向下取整的数值 (DECIMAL)。
 输出: 
     floor(A):A 向下取整后的整数值 (DECIMAL)。
 使用方法: 
    1.  将需要向下取整的数值 (DECIMAL 类型) 连接到 `A 输入。
    2.  从 `floor(A) 输出读取结果 (DECIMAL 类型)。

 3.11. `CEIL 

 功能:  将一个数值向上取整到最接近的整数。
 输入: 
     A:要向上取整的数值 (DECIMAL)。
 输出: 
     ceil(A):A 向上取整后的整数值 (DECIMAL)。
 使用方法: 
    1.  将需要向上取整的数值 (DECIMAL 类型) 连接到 `A 输入。
    2.  从 `ceil(A) 输出读取结果 (DECIMAL 类型)。

 3.12. `CLAMP (DECIMAL) 

 功能:  将单个数值限制在指定的范围内。
 输入: 
     INPUT / `A: 你想要限制的数值 (DECIMAL)。
     Min: 允许的最小值 (DECIMAL)。
     Max: 允许的最大值 (DECIMAL)。
 输出: 
     clamp(A, Min, Max) / `RESULT:经过限制后的数值 (DECIMAL)。 如果输入值低于 Min，则输出将为 Min。 如果输入值高于 Max，则输出将为 Max。 否则，输出将与输入相同。
 使用方法: 
    1.  将需要限制的数值 (DECIMAL 类型) 连接到 `INPUT`/`A 输入，将最小值 (DECIMAL 类型) 连接到 `Min 输入，将最大值 (DECIMAL 类型) 连接到 `Max 输入。
    2.  从输出端口读取结果 (DECIMAL 类型)。

 3.13. `AVERAGE 

 功能:  计算两个数值的平均值。
 输入: 
     A:第一个数值 (DECIMAL)。
     B:第二个数值 (DECIMAL)。
 输出: 
     (A+B)/2:A 和 B 的平均值 (DECIMAL)。
 使用方法: 
    1.  将需要计算平均值的两个数值 (DECIMAL 类型) 连接到 `A 和 `B 输入。
    2.  从 `(A+B)/2 输出读取平均值 (DECIMAL 类型)。

 3.14. `MIN 

 功能:  返回两个数值中较小的值。
 输入: 
     A:第一个数值 (DECIMAL)。
     B:第二个数值 (DECIMAL)。
 输出: 
     min(A, B):A 和 B 中较小的值 (DECIMAL)。
 使用方法: 
    1.  将需要比较的两个数值 (DECIMAL 类型) 连接到 `A 和 `B 输入。
    2.  从 `min(A, B) 输出读取结果 (DECIMAL 类型)。

 3.15. `MAX 

 功能:  返回两个数值中较大的值。
 输入: 
     A:第一个数值 (DECIMAL)。
     B:第二个数值 (DECIMAL)。
 输出: 
     max(A, B):A 和 B 中较大的值 (DECIMAL)。
 使用方法: 
    1.  将需要比较的两个数值 (DECIMAL 类型) 连接到 `A 和 `B 输入。
    2.  从 `max(A, B) 输出读取结果 (DECIMAL 类型)。

 3.16. `SQUARE 

 功能:  计算一个数值的平方。
 输入: 
     A:要计算平方的数值 (DECIMAL)。
 输出: 
     A*A:A 的平方 (DECIMAL)。
 使用方法: 
    1.  将需要计算平方的数值 (DECIMAL 类型) 连接到 `A 输入。
    2.  从 `A*A 输出读取结果 (DECIMAL 类型)。

 3.17. `Inverse 

 功能:  计算输入数值的倒数 (1 / Input)。
 输入: 
     输入值 / `A`: 需要计算倒数的数值 (DECIMAL)。
 输出: 
     倒数 / `1/A`: 输入值的倒数 (DECIMAL)。注意：输入为 0 时结果未定义或为无穷大。
 使用方法: 
    1.  将需要计算倒数的数值 (DECIMAL 类型) 连接到 `输入值`/`A 端口。
    2.  从 `倒数`/`1/A 端口读取计算得到的倒数值 (DECIMAL 类型)。

 3.18. `SIGN 

 功能:  判断一个数值的符号。
 输入: 
     A:要判断符号的数值 (DECIMAL)。
 输出: 
     sign(A):A 的符号 (DECIMAL)。如果 A < 0，输出 -1；如果 A = 0，输出 0；如果 A > 0，输出 1。
 使用方法: 
    1.  将需要判断符号的数值 (DECIMAL 类型) 连接到 `A 输入。
    2.  从输出端口读取结果 (DECIMAL 类型)。

 3.19. `Clamp01 

 功能:  将输入的数值限制（钳位）在 0 到 1 的闭区间范围内。
 输入: 
     输入值`: 需要被限制的原始数值 (DECIMAL)。
 输出: 
     结果`: 经过限制处理后的数值，其值总是在 0 和 1 之间（包含 0 和 1）(DECIMAL)。
 使用方法: 
    1.  将需要限制范围的数值 (DECIMAL 类型) 连接到 `输入值 端口。
    2.  从 `结果 端口读取被限制在 \[0, 1] 区间内的值 (DECIMAL 类型)。

 3.20. `Exp 

 功能:  计算自然常数 e 的输入数值次幂 (e^Input)。
 输入: 
     指数`: 作为幂指数的数值 (DECIMAL)。
 输出: 
     结果`: e 的 `指数 次方计算结果 (DECIMAL)。
 使用方法: 
    1.  将需要计算 e 次幂的指数值 (DECIMAL 类型) 连接到 `指数 端口。
    2.  从 `结果 端口读取计算得到的 e 次幂值 (DECIMAL 类型)。
3.21. `LOGARITHM` (对数) 

 功能:  计算以指定底数为底的对数值。
 输入: 
    * `VALUE` (蓝色): 要求对数的真数 (DECIMAL)。
    * `BASE` (蓝色): 对数的底数 (DECIMAL)。
 输出: 
    * `RESULT` (蓝色): `VALUE` 以 `BASE` 为底的对数值 (DECIMAL)。
 使用方法: 
    1.  将要求对数的真数值 (DECIMAL 类型) 连接到 `VALUE` 输入。
    2.  将对数的底数值 (DECIMAL 类型) 连接到 `BASE` 输入。
    3.  从 `RESULT` 输出读取计算结果 (DECIMAL 类型)。

---

 4. 三角函数与角度 (Trigonometry & Angles) 

处理角度和三角关系。

 4.1. `SIN 

 功能:  计算一个角度的正弦值。
 输入: 
     Angle:要计算正弦值的角度 (DECIMAL，弧度)。
 输出: 
     sin(Angle):Angle 的正弦值 (DECIMAL)。
 使用方法: 
    1.  将需要计算正弦值的角度 (DECIMAL 类型，以弧度为单位) 连接到 `Angle 输入。
    2.  从 `sin(Angle) 输出读取正弦值 (DECIMAL 类型)。

 4.2. `COS 

 功能:  计算一个角度的余弦值。
 输入: 
     Angle:要计算余弦值的角度 (DECIMAL，弧度)。
 输出: 
     cos(Angle):Angle 的余弦值 (DECIMAL)。
 使用方法: 
    1.  将需要计算余弦值的角度 (DECIMAL 类型，以弧度为单位) 连接到 `Angle 输入。
    2.  从 `cos(Angle) 输出读取余弦值 (DECIMAL 类型)。

 4.3. `TAN 

 功能:  计算一个角度的正切值。
 输入: 
     Angle:要计算正切值的角度 (DECIMAL，弧度)。
 输出: 
     tan(Angle):Angle 的正切值 (DECIMAL)。
 使用方法: 
    1.  将需要计算正切值的角度 (DECIMAL 类型，以弧度为单位) 连接到 `Angle 输入。
    2.  从 `tan(Angle) 输出读取正切值 (DECIMAL 类型)。

 4.4. `ASIN 

 功能:  计算一个数值的反正弦值（反正弦函数）。
 输入: 
     Value:要计算反正弦值的数值 (DECIMAL，范围通常在 -1 到 1 之间)。
 输出: 
     asin(Value):Value 的反正弦值 (DECIMAL，弧度)。
 使用方法: 
    1.  将需要计算反正弦值的数值 (DECIMAL 类型，范围通常在 -1 到 1 之间) 连接到 `Value 输入。
    2.  从 `asin(Value) 输出读取反正弦值 (DECIMAL 类型，以弧度为单位)。

 4.5. `ACOS 

 功能:  计算一个数值的反余弦值（反余弦函数）。
 输入: 
     Value:要计算反余弦值的数值 (DECIMAL，范围通常在 -1 到 1 之间)。
 输出: 
     acos(Value):Value 的反余弦值 (DECIMAL，弧度)。
 使用方法: 
    1.  将需要计算反余弦值的数值 (DECIMAL 类型，范围通常在 -1 到 1 之间) 连接到 `Value 输入。
    2.  从 `acos(Value) 输出读取反余弦值 (DECIMAL 类型，以弧度为单位)。

 4.6. `ATAN 

 功能:  计算一个数值的反正切值（反正切函数）。
 输入: 
     Value:要计算反正切值的数值 (DECIMAL)。
 输出: 
     atan(Value):Value 的反正切值 (DECIMAL，弧度)。
 使用方法: 
    1.  将需要计算反正切值的数值 (DECIMAL 类型) 连接到 `Value 输入。
    2.  从 `atan(Value) 输出读取反正切值 (DECIMAL 类型，以弧度为单位)。

 4.7. `RAD to DEG 

 功能:  将角度从弧度转换为度数。
 输入: 
     RAD:要转换的角度值 (DECIMAL，弧度)。
 输出: 
     DEG:转换后的角度值 (DECIMAL，度数)。
 使用方法: 
    1.  将需要转换的角度值 (DECIMAL 类型，以弧度为单位) 连接到 `RAD 输入。
    2.  从 `DEG 输出读取转换后的角度值 (DECIMAL 类型，以度数为单位)。

 4.8. `LERP (角度插值) 

 功能:  在两个角度之间进行线性插值。
 输入: 
     A:起始角度 (DECIMAL)。
     B:结束角度 (DECIMAL)。
     T:插值系数 (DECIMAL)，范围通常在 0 到 1 之间。
 输出: 
     A + (B - A) * T:A 和 B 之间的插值结果 (DECIMAL)。
 使用方法: 
    1.  将起始角度 (DECIMAL 类型) 连接到 `A 输入，将结束角度 (DECIMAL 类型) 连接到 `B 输入，将插值系数 (DECIMAL 类型) 连接到 `T 输入。
    2.  从 `A + (B - A) * T 输出读取插值结果 (DECIMAL 类型)。

 4.9. `DeltaAngle 

 功能:  计算两个角度之间的最短角度差（处理 360 度回绕）。例如，350 度和 10 度之间的差是 20 度。
 输入: 
     角度A`: 第一个角度值（单位：度）(DECIMAL)。
     角度B`: 第二个角度值（单位：度）(DECIMAL)。
 输出: 
     角度差`: 两个角度之间的最短差值（单位：度），结果通常在 \[-180, 180] 区间内 (DECIMAL)。
 使用方法: 
    1.  将需要比较的两个角度值 (DECIMAL 类型，度数) 连接到 `角度A 和 `角度B 输入。
    2.  从 `角度差 端口读取它们之间的最短角度差 (DECIMAL 类型，度数)。

 4.10. `CosineFormulaSide (余弦定理求边长) 

 功能:  使用余弦定理，根据三角形的两条边长和它们之间的夹角计算第三条边的长度。
 输入: 
     边长A`: 三角形的一条边长 (DECIMAL)。
     边长B`: 三角形的另一条边长 (DECIMAL)。
     夹角C`: 边长 A 和 B 之间的夹角（单位：度） (DECIMAL)。
 输出: 
     边长C`: 计算得到的第三条边的长度 (DECIMAL)。
 使用方法: 
    1.  将已知两条边长 (DECIMAL 类型) 连接到 `边长A 和 `边长B 输入。
    2.  将这两条边之间的夹角（DECIMAL 类型，度数）连接到 `夹角C 输入。
    3.  从 `边长C 端口读取计算出的第三边长度 (DECIMAL 类型)。

 4.11. `CosineFormulaAngle (余弦定理求角度) 

 功能:  使用余弦定理，根据三角形的三条边长计算其中一个角的大小。
 输入: 
     边长A`: 三角形的一条边长 (DECIMAL)。
     边长B`: 三角形的另一条边长 (DECIMAL)。
     边长C`: 需要求其对角的第三条边长 (DECIMAL)。
 输出: 
     角度C`: 计算得到的边长 C 所对的角的大小（单位：度） (DECIMAL)。
 使用方法: 
    1.  将三角形的三条边长 (DECIMAL 类型) 连接到 `边长A`, `边长B`, `边长C 输入（注意 `边长C 是要求其对角的边）。
    2.  从 `角度C 端口读取计算出的角度值 (DECIMAL 类型，度数)。

 4.12. `PythagoreanCathetus (勾股定理求直角边) 

 功能:  使用勾股定理，在直角三角形中根据斜边和一条直角边计算另一条直角边的长度。
 输入: 
     斜边`: 直角三角形的斜边长度 (DECIMAL)。
     直角边A`: 已知的一条直角边长度 (DECIMAL)。
 输出: 
     直角边B`: 计算得到的另一条直角边长度 (DECIMAL)。
 使用方法: 
    1.  将斜边长度 (DECIMAL 类型) 连接到 `斜边 输入。
    2.  将已知的一条直角边长度 (DECIMAL 类型) 连接到 `直角边A 输入。
    3.  从 `直角边B 端口读取计算出的另一条直角边长度 (DECIMAL 类型)。

 4.13. `PythagoreanSide (勾股定理求斜边) 

 功能:  使用勾股定理，在直角三角形中根据两条直角边计算斜边的长度。
 输入: 
     直角边A`: 一条直角边长度 (DECIMAL)。
     直角边B`: 另一条直角边长度 (DECIMAL)。
 输出: 
     斜边`: 计算得到的斜边长度 (DECIMAL)。
 使用方法: 
    1.  将两条直角边的长度 (DECIMAL 类型) 连接到 `直角边A 和 `直角边B 输入。
    2.  从 `斜边 端口读取计算出的斜边长度 (DECIMAL 类型)。

 5. 逻辑与比较 (Logic & Comparison) 

执行布尔逻辑和数值比较。(注意：已移除原文本中的重复逻辑门描述)

 5.1. `AND 

 功能:  执行逻辑“与”运算。
 输入: 
     A:第一个布尔值 (DECIMAL，0 代表 false，非 0 代表 true)。
     B:第二个布尔值 (DECIMAL，0 代表 false，非 0 代表 true)。
 输出: 
     A AND B:A 和 B 的逻辑“与”结果 (DECIMAL，1 代表 true，0 代表 false)。当 A 和 B 都为 true 时，结果为 true，否则为 false。
 使用方法: 
    1.  将需要进行逻辑“与”运算的两个布尔值 (DECIMAL 类型) 连接到 `A 和 `B 输入。
    2.  从 `A AND B 输出读取结果 (DECIMAL 类型)。

 5.2. `OR 

 功能:  执行逻辑“或”运算。
 输入: 
     A:第一个布尔值 (DECIMAL，0 代表 false，非 0 代表 true)。
     B:第二个布尔值 (DECIMAL，0 代表 false，非 0 代表 true)。
 输出: 
     A OR B:A 和 B 的逻辑“或”结果 (DECIMAL，1 代表 true，0 代表 false)。当 A 和 B 至少有一个为 true 时，结果为 true，否则为 false。
 使用方法: 
    1.  将需要进行逻辑“或”运算的两个布尔值 (DECIMAL 类型) 连接到 `A 和 `B 输入。
    2.  从 `A OR B 输出读取结果 (DECIMAL 类型)。

 5.3. `XOR 

 功能:  执行逻辑“异或”运算。
 输入: 
     A:第一个布尔值 (DECIMAL，0 代表 false，非 0 代表 true)。
     B:第二个布尔值 (DECIMAL，0 代表 false，非 0 代表 true)。
 输出: 
     A XOR B:A 和 B 的逻辑“异或”结果 (DECIMAL，1 代表 true，0 代表 false)。当 A 和 B 的值不同时，结果为 true，否则为 false。
 使用方法: 
    1.  将需要进行逻辑“异或”运算的两个布尔值 (DECIMAL 类型) 连接到 `A 和 `B 输入。
    2.  从 `A XOR B 输出读取结果 (DECIMAL 类型)。

 5.4. `NOT 

 功能:  执行逻辑“非”运算。
 输入: 
     A:要取反的布尔值 (DECIMAL，0 代表 false，非 0 代表 true)。
 输出: 
     NOT A:A 的逻辑“非”结果 (DECIMAL，1 代表 true，0 代表 false)。当 A 为 true 时，结果为 false；当 A 为 false 时，结果为 true。
 使用方法: 
    1.  将需要进行逻辑“非”运算的布尔值 (DECIMAL 类型) 连接到 `A 输入。
    2.  从 `NOT A 输出读取结果 (DECIMAL 类型)。

 5.5. `NAND 

 功能:  执行逻辑“与非”运算。
 输入: 
     A:第一个布尔值 (DECIMAL，0 代表 false，非 0 代表 true)。
     B:第二个布尔值 (DECIMAL，0 代表 false，非 0 代表 true)。
 输出: 
     NOT (A AND B):A 和 B 的逻辑“与非”结果 (DECIMAL，1 代表 true，0 代表 false)。当 A 和 B 都为 true 时，结果为 false，否则为 true。
 使用方法: 
    1.  将需要进行逻辑“与非”运算的两个布尔值 (DECIMAL 类型) 连接到 `A 和 `B 输入。
    2.  从 `NOT (A AND B) 输出读取结果 (DECIMAL 类型)。

 5.6. `NOR 

 功能:  执行逻辑“或非”运算。
 输入: 
     A:第一个布尔值 (DECIMAL，0 代表 false，非 0 代表 true)。
     B:第二个布尔值 (DECIMAL，0 代表 false，非 0 代表 true)。
 输出: 
     NOT (A OR B):A 和 B 的逻辑“或非”结果 (DECIMAL，1 代表 true，0 代表 false)。当 A 和 B 都为 false 时，结果为 true，否则为 false。
 使用方法: 
    1.  将需要进行逻辑“或非”运算的两个布尔值 (DECIMAL 类型) 连接到 `A 和 `B 输入。
    2.  从 `NOT (A OR B) 输出读取结果 (DECIMAL 类型)。

 5.7. `NXOR 

 功能:  执行逻辑“同或”运算。
 输入: 
     A:第一个布尔值 (DECIMAL，0 代表 false，非 0 代表 true)。
     B:第二个布尔值 (DECIMAL，0 代表 false，非 0 代表 true)。
 输出: 
     NOT (A XOR B):A 和 B 的逻辑“同或”结果 (DECIMAL，1 代表 true，0 代表 false)。当 A 和 B 的值相同时，结果为 true，否则为 false。
 使用方法: 
    1.  将需要进行逻辑“同或”运算的两个布尔值 (DECIMAL 类型) 连接到 `A 和 `B 输入。
    2.  从 `NOT (A XOR B) 输出读取结果 (DECIMAL 类型)。

 5.8. `GREATER THAN 

 功能:  判断一个数值是否大于另一个数值。
 输入: 
     A:第一个数值 (DECIMAL)。
     B:第二个数值 (DECIMAL)。
 输出: 
     A > B:如果 A 大于 B，则为 true (1)，否则为 false (0) (DECIMAL)。
 使用方法: 
    1.  将需要比较的两个数值 (DECIMAL 类型) 连接到 `A 和 `B 输入。
    2.  从 `A > B 输出读取结果 (DECIMAL 类型)。

 5.9. `LESS THAN 

 功能:  判断一个数值是否小于另一个数值。
 输入: 
     A:第一个数值 (DECIMAL)。
     B:第二个数值 (DECIMAL)。
 输出: 
     A < B:如果 A 小于 B，则为 true (1)，否则为 false (0) (DECIMAL)。
 使用方法: 
    1.  将需要比较的两个数值 (DECIMAL 类型) 连接到 `A 和 `B 输入。
    2.  从 `A < B 输出读取结果 (DECIMAL 类型)。

 5.10. `EQUAL 

 功能:  判断两个数值是否相等。
 输入: 
     A:第一个数值 (DECIMAL)。
     B:第二个数值 (DECIMAL)。
 输出: 
     A == B:如果 A 等于 B，则为 true (1)，否则为 false (0) (DECIMAL)。
 使用方法: 
    1.  将需要比较的两个数值 (DECIMAL 类型) 连接到 `A 和 `B 输入。
    2.  从 `A == B 输出读取结果 (DECIMAL 类型)。

 5.11. `NOT EQUAL 

 功能:  判断两个数值是否不相等。
 输入: 
     A:第一个数值 (DECIMAL)。
     B:第二个数值 (DECIMAL)。
 输出: 
     A != B:如果 A 不等于 B，则为 true (1)，否则为 false (0) (DECIMAL)。
 使用方法: 
    1.  将需要比较的两个数值 (DECIMAL 类型) 连接到 `A 和 `B 输入。
    2.  从 `A != B 输出读取结果 (DECIMAL 类型)。

 5.12. `GREATER OR EQUAL 

 功能:  判断一个数值是否大于或等于另一个数值。
 输入: 
     A:第一个数值 (DECIMAL)。
     B:第二个数值 (DECIMAL)。
 输出: 
     A >= B:如果 A 大于或等于 B，则为 true (1)，否则为 false (0) (DECIMAL)。
 使用方法: 
    1.  将需要比较的两个数值 (DECIMAL 类型) 连接到 `A 和 `B 输入。
    2.  从 `A >= B 输出读取结果 (DECIMAL 类型)。

 5.13. `LESS OR EQUAL 

 功能:  判断一个数值是否小于或等于另一个数值。
 输入: 
     A:第一个数值 (DECIMAL)。
     B:第二个数值 (DECIMAL)。
 输出: 
     A <= B:如果 A 小于或等于 B，则为 true (1)，否则为 false (0) (DECIMAL)。
 使用方法: 
    1.  将需要比较的两个数值 (DECIMAL 类型) 连接到 `A 和 `B 输入。
    2.  从 `A <= B 输出读取结果 (DECIMAL 类型)。

 5.14. `branch 

 功能:  根据条件选择输出不同的值 (仅限 DECIMAL)。
 输入: 
     Condition:条件 (DECIMAL，0 代表 false，非 0 代表 true)。
     A:如果条件为 true，则输出此值 (DECIMAL)。
     B:如果条件为 false，则输出此值 (DECIMAL)。
 输出: 
    * 根据条件选择输出的值 (DECIMAL)。
 使用方法: 
    1.  将条件 (DECIMAL 类型) 连接到 `Condition 输入，将条件为 true 时输出的值 (DECIMAL 类型) 连接到 `A 输入，将条件为 false 时输出的值 (DECIMAL 类型) 连接到 `B 输入。
    2.  从输出端口读取结果 (DECIMAL 类型)。

 5.15. `branch

 功能:  根据条件选择输出不同的值 (支持任意类型)。
 输入: 
     Condition:条件 (DECIMAL, 0 代表 false, 非 0 代表 true)。
     A:如果条件为 true，则输出此值 (任意类型)。
     B:如果条件为 false，则输出此值 (任意类型)。
 输出: 
    * 根据条件选择输出的值 (类型与 `A 和 `B 相同)。
 使用方法: 
    1.  将条件 (DECIMAL 类型) 连接到 `Condition 输入，将条件为 true 时输出的值 (任意类型) 连接到 `A 输入，将条件为 false 时输出的值 (任意类型) 连接到 `B 输入。
    2.  从输出端口读取结果 (类型与 `A 和 `B 相同)。

 5.16. `Is InRangeExclusive (开区间范围判断) 

 功能:  判断一个数值是否严格位于指定的最小值和最大值之间（不包含边界）。
 输入: 
     数值`: 需要判断的数值 (DECIMAL)。
     最小值`: 范围的下限（不包含） (DECIMAL)。
     最大值`: 范围的上限（不包含） (DECIMAL)。
 输出: 
     结果`: 如果 `最小值 < `数值 < `最大值`，则输出 1 (true)，否则输出 0 (false) (DECIMAL)。
 使用方法: 
    1.  将需要判断的数值连接到 `数值 输入。
    2.  将范围的最小值连接到 `最小值 输入，最大值连接到 `最大值 输入。
    3.  从 `结果 端口读取判断结果 (DECIMAL 类型，1 或 0)。

 5.17. `Is InRangeInclusive (闭区间范围判断) 

 功能:  判断一个数值是否位于指定的最小值和最大值之间（包含边界）。
 输入: 
     数值`: 需要判断的数值 (DECIMAL)。
     最小值`: 范围的下限（包含） (DECIMAL)。
     最大值`: 范围的上限（包含） (DECIMAL)。
 输出: 
     结果`: 如果 `最小值 <= `数值 <= `最大值`，则输出 1 (true)，否则输出 0 (false) (DECIMAL)。
 使用方法: 
    1.  将需要判断的数值连接到 `数值 输入。
    2.  将范围的最小值连接到 `最小值 输入，最大值连接到 `最大值 输入。
    3.  从 `结果 端口读取判断结果 (DECIMAL 类型，1 或 0)。

好的，我们继续。

---

 6. 向量与颜色 (Vector & Color) 

操作二维/三维向量及颜色信息。

 6.1. `Combine (组合为向量/颜色) 

 功能:  将四个数值组合成一个四维向量 (VECTOR)，可用于表示位置、方向或颜色 (RGBA)。
 输入: 
     X / R (DECIMAL): 向量的 X 分量 或 颜色的 R (红色) 分量。
     Y / G (DECIMAL): 向量的 Y 分量 或 颜色的 G (绿色) 分量。
     Z / B (DECIMAL): 向量的 Z 分量 或 颜色的 B (蓝色) 分量。
     W / A (DECIMAL): 向量的 W 分量 或 颜色的 A (透明度) 分量。
 输出: 
     Vector (VECTOR): 组合成的四维向量 (X, Y, Z, W)。
 使用方法: 
    1.  将代表 X/R, Y/G, Z/B, W/A 的数值 (DECIMAL 类型) 分别连接到对应的四个输入端口。
    2.  从 `Vector 输出端口读取组合成的四维向量 (VECTOR 类型)。

 6.2. `Split (分解向量/颜色) 

 功能:  将一个四维向量 (VECTOR) 分解为其四个组成数值，可用于提取坐标分量或颜色通道。
 输入: 
     Vector (VECTOR): 需要分解的四维向量。
 输出: 
     X / R (DECIMAL): 向量的 X 分量 或 颜色的 R (红色) 分量。
     Y / G (DECIMAL): 向量的 Y 分量 或 颜色的 G (绿色) 分量。
     Z / B (DECIMAL): 向量的 Z 分量 或 颜色的 B (蓝色) 分量。
     W / A (DECIMAL): 向量的 W 分量 或 颜色的 A (透明度) 分量。
 使用方法: 
    1.  将需要分解的四维向量 (VECTOR 类型) 连接到 `Vector 输入端口。
    2.  从对应的 `X/R`, `Y/G`, `Z/B`, `W/A 输出端口读取分解出的数值 (DECIMAL 类型)。

 6.3. `NORMALIZE VECTOR 

 功能:  将一个三维向量标准化（转换为单位向量，长度为 1）。
 输入: 
     Vector:要标准化的三维向量 (VECTOR)。
 输出: 
     normalized(Vector):标准化后的单位向量 (VECTOR)。
 使用方法: 
    1.  将需要标准化的三维向量 (VECTOR 类型) 连接到 `Vector 输入。
    2.  从 `normalized(Vector) 输出读取标准化后的单位向量 (VECTOR 类型)。

 6.4. `VECTOR DOT PRODUCT 

 功能:  计算两个三维向量的点积。
 输入: 
     A:第一个三维向量 (VECTOR)。
     B:第二个三维向量 (VECTOR)。
 输出: 
     A · B:A 和 B 的点积 (DECIMAL)。
 使用方法: 
    1.  将需要计算点积的两个三维向量 (VECTOR 类型) 连接到 `A 和 `B 输入。
    2.  从 `A · B 输出读取点积 (DECIMAL 类型)。

 6.5. `VECTOR CROSS PRODUCT 

 功能:  计算两个三维向量的叉积。
 输入: 
     A:第一个三维向量 (VECTOR)。
     B:第二个三维向量 (VECTOR)。
 输出: 
     A × B:A 和 B 的叉积 (VECTOR)，结果向量垂直于 A 和 B 构成的平面。
 使用方法: 
    1.  将需要计算叉积的两个三维向量 (VECTOR 类型) 连接到 `A 和 `B 输入。
    2.  从 `A × B 输出读取叉积 (VECTOR 类型)。

 6.6. `MAGNITUDE 

 功能:  计算输入向量的幅度（长度或大小）。
 输入:  一个向量 (VECTOR)。
 输出:  该向量的幅度 (DECIMAL)。
 使用方法:  将向量连接到输入端口，从输出端口读取其长度值。

 6.7. `VECTOR ADD 

 功能:  将两个三维向量相加（对应分量相加）。
 输入: 
     A:第一个三维向量 (VECTOR)。
     B:第二个三维向量 (VECTOR)。
 输出: 
     A + B:A 和 B 的和 (VECTOR)。
 使用方法: 
    1.  将需要相加的两个三维向量 (VECTOR 类型) 连接到 `A 和 `B 输入。
    2.  从 `A + B 输出读取和 (VECTOR 类型)。

 6.8. `VECTOR SUBTRACT 

 功能:  将两个三维向量相减（对应分量相减）。
 输入: 
     A:被减数三维向量 (VECTOR)。
     B:减数三维向量 (VECTOR)。
 输出: 
     A - B:A 和 B 的差 (VECTOR)。
 使用方法: 
    1.  将需要相减的两个三维向量 (VECTOR 类型) 连接到 `A 和 `B 输入。
    2.  从 `A - B 输出读取差 (VECTOR 类型)。

 6.9. `VECTOR MULTIPLY 

 功能:  将一个三维向量的每个分量乘以一个标量。
 输入: 
     Vector:要相乘的三维向量 (VECTOR)。
     Scalar:标量 (DECIMAL)。
 输出: 
     Vector * Scalar:向量和标量的积 (VECTOR)。
 使用方法: 
    1.  将需要相乘的三维向量 (VECTOR 类型) 连接到 `Vector 输入，将标量 (DECIMAL 类型) 连接到 `Scalar 输入。
    2.  从 `Vector * Scalar 输出读取积 (VECTOR 类型)。

 6.10. `VECTOR DIVIDE 

 功能:  将一个三维向量的每个分量除以一个标量。
 输入: 
     Vector:要相除的三维向量 (VECTOR)。
     Scalar:标量 (DECIMAL)。注意：除数不能为 0。
 输出: 
     Vector / Scalar:向量和标量的商 (VECTOR)。
 使用方法: 
    1.  将需要相除的三维向量 (VECTOR 类型) 连接到 `Vector 输入，将标量 (DECIMAL 类型) 连接到 `Scalar 输入。
    2.  从 `Vector / Scalar 输出读取商 (VECTOR 类型)。

 6.11. `HSV to RGB 

 功能:  将颜色从 HSV (色相, 饱和度, 明度) 颜色空间转换为 RGB (红, 绿, 蓝) 颜色空间。
 输入: 
     H:色相 (DECIMAL，范围通常在 0 到 1 或 0 到 360，具体取决于实现)。
     S:饱和度 (DECIMAL，范围通常在 0 到 1 之间)。
     V:明度 (DECIMAL，范围通常在 0 到 1 之间)。
 输出: 
     RGB Color:转换后的 RGB 颜色值 (通常是一个 VECTOR，X=R, Y=G, Z=B, W可能为1或Alpha)。
 使用方法: 
    1.  将色相 (DECIMAL 类型) 连接到 `H 输入，将饱和度 (DECIMAL 类型) 连接到 `S 输入，将明度 (DECIMAL 类型) 连接到 `V 输入。
    2.  从 `RGB Color 输出读取转换后的 RGB 颜色值 (VECTOR 类型)。

 6.12. `RGB to HSV 

 功能:  将颜色从 RGB (红, 绿, 蓝) 颜色空间转换为 HSV (色相, 饱和度, 明度) 颜色空间。
 输入: 
     R:红色分量 (DECIMAL，范围通常在 0 到 1 或 0 到 255)。
     G:绿色分量 (DECIMAL，范围同 R)。
     B:蓝色分量 (DECIMAL，范围同 R)。
 输出: 
     HSV Color:转换后的 HSV 颜色值 (通常是一个 VECTOR，X=H, Y=S, Z=V, W可能未使用)。
 使用方法: 
    1.  将红色分量 (DECIMAL 类型) 连接到 `R 输入，将绿色分量 (DECIMAL 类型) 连接到 `G 输入，将蓝色分量 (DECIMAL 类型) 连接到 `B 输入。(注意输入范围)
    2.  从 `HSV Color 输出读取转换后的 HSV 颜色值 (VECTOR 类型)。

 6.13. `OFFSET VECTOR 

 功能:  通过指定偏移量来移动一个向量（相当于向量加法）。
 输入: 
     Vector:要移动的向量 (VECTOR)。
     Offset:偏移量 (VECTOR)。
 输出: 
     Vector + Offset:移动后的向量 (VECTOR)。
 使用方法: 
    1.  将要移动的向量 (VECTOR 类型) 连接到 `Vector 输入，将偏移量 (VECTOR 类型) 连接到 `Offset 输入。
    2.  从 `Vector + Offset 输出读取移动后的向量 (VECTOR 类型)。

 6.14. `ROTATE VECTOR 

 功能:  将一个向量绕指定轴旋转一定角度。
 输入: 
     Vector:要旋转的向量 (VECTOR)。
     Axis:旋转轴 (VECTOR)。(在 2D 游戏中，通常是 Z 轴 (0,0,1) 或其负方向)。
     Angle:旋转角度 (DECIMAL，弧度)。
 输出: 
     Rotated Vector:旋转后的向量 (VECTOR)。
 使用方法: 
    1.  将要旋转的向量 (VECTOR 类型) 连接到 `Vector 输入，将旋转轴 (VECTOR 类型) 连接到 `Axis 输入，将旋转角度 (DECIMAL 类型，以弧度为单位) 连接到 `Angle 输入。
    2.  从 `Rotated Vector 输出读取旋转后的向量 (VECTOR 类型)。

 6.15. `SCALE VECTOR 

 功能:  缩放一个向量（相当于向量乘以标量）。
 输入: 
     Vector:要缩放的向量 (VECTOR)。
     Scale:缩放比例 (DECIMAL)。
 输出: 
     Scaled Vector:缩放后的向量 (VECTOR)。
 使用方法: 
    1.  将要缩放的向量 (VECTOR 类型) 连接到 `Vector 输入，将缩放比例 (DECIMAL 类型) 连接到 `Scale 输入。
    2.  从 `Scaled Vector 输出读取缩放后的向量 (VECTOR 类型)。

 6.16. `LERP VECTOR 

 功能:  在两个向量之间进行线性插值。
 输入: 
     A:起始向量 (VECTOR)。
     B:结束向量 (VECTOR)。
     T:插值系数 (DECIMAL)，范围通常在 0 到 1 之间。0 时结果为 A，1 时结果为 B。
 输出: 
     A + (B - A) * T:A 和 B 之间的插值结果 (VECTOR)。
 使用方法: 
    1.  将起始向量 (VECTOR 类型) 连接到 `A 输入，将结束向量 (VECTOR 类型) 连接到 `B 输入，将插值系数 (DECIMAL 类型，通常 0-1) 连接到 `T 输入。
    2.  从 `A + (B - A) * T 输出读取插值结果 (VECTOR 类型)。

 6.17. `CLAMP VECTOR 

 功能:  将向量的每个分量限制在指定的标量最小值和最大值之间。
 输入: 
     INPUT / `Vector: 要限制的向量 (VECTOR)。
     Min: 每个分量允许的最小值 (DECIMAL)。
     Max: 每个分量允许的最大值 (DECIMAL)。
 输出: 
     clamp(Vector, Min, Max) / `RESULT:将向量的每个分量限制在 Min 和 Max 之间的结果 (VECTOR)。
 使用方法: 
    1.  将要限制的向量 (VECTOR 类型) 连接到 `INPUT`/`Vector 输入，将最小值 (DECIMAL 类型) 连接到 `Min 输入，将最大值 (DECIMAL 类型) 连接到 `Max 输入。
    2.  从输出端口读取结果 (VECTOR 类型)。

 6.18. `WorldPositionToLocal (世界坐标转局部坐标) 

 功能:  将一个世界坐标系下的位置向量转换为指定实体局部坐标系下的相对位置向量。
 输入: 
     参考实体`: 提供局部坐标系的参考实体 (ENTITY)。
     世界坐标`: 需要转换的世界坐标位置 (VECTOR)。
 输出: 
     局部坐标`: 转换后，相对于 `参考实体 的局部坐标位置 (VECTOR)。
 使用方法: 
    1.  将定义局部坐标系的实体 (ENTITY 类型) 连接到 `参考实体 输入。
    2.  将需要转换的世界坐标向量 (VECTOR 类型) 连接到 `世界坐标 输入。
    3.  从 `局部坐标 端口读取转换得到的局部坐标向量 (VECTOR 类型)。

 6.19. `LocalPositionToWorld (局部坐标转世界坐标) 

 功能:  将一个相对于指定实体局部坐标系的位置向量转换为世界坐标系下的位置向量。
 输入: 
     参考实体`: 定义局部坐标系的参考实体 (ENTITY)。
     局部坐标`: 需要转换的、相对于 `参考实体 的局部坐标位置 (VECTOR)。
 输出: 
     世界坐标`: 转换后的世界坐标位置 (VECTOR)。
 使用方法: 
    1.  将定义局部坐标系的实体 (ENTITY 类型) 连接到 `参考实体 输入。
    2.  将需要转换的局部坐标向量 (VECTOR 类型) 连接到 `局部坐标 输入。
    3.  从 `世界坐标 端口读取转换得到的世界坐标向量 (VECTOR 类型)。
6.20. `SQR MAGNITUDE` (向量长度平方) 

 功能:  计算输入向量的长度（模）的平方。这在比较向量长度时比直接计算长度（需要开平方根）更高效。
 输入: 
    * `INPUT (X:0 Y:0 Z:0 W:0)` (绿色): 一个向量 (VECTOR)。
 输出: 
    * `RESULT (0.00)` (蓝色): 该向量长度的平方值 (DECIMAL)。
 使用方法: 
    1.  将需要计算长度平方的向量 (VECTOR 类型) 连接到 `INPUT` 端口。
    2.  从 `RESULT` 端口读取其长度的平方值 (DECIMAL 类型)。
 7. 位运算 (Bitwise Operations) 

对整数进行二进制位操作。

 7.1. `SHIFT LEFT 

 功能:  将一个整数的二进制位向左移动指定的位数（相当于乘以 2 的 Bits 次方）。
 输入: 
     Value:要进行移位操作的整数 (DECIMAL)。
     Bits:要移动的位数 (DECIMAL)。
 输出: 
     Value << Bits:移位后的整数 (DECIMAL)。
 使用方法: 
    1.  将要进行移位操作的整数 (DECIMAL 类型) 连接到 `Value 输入，将要移动的位数 (DECIMAL 类型) 连接到 `Bits 输入。
    2.  从 `Value << Bits 输出读取移位后的整数 (DECIMAL 类型)。

 7.2. `SHIFT RIGHT 

 功能:  将一个整数的二进制位向右移动指定的位数（相当于除以 2 的 Bits 次方，通常为逻辑右移或算术右移，取决于实现）。
 输入: 
     Value:要进行移位操作的整数 (DECIMAL)。
     Bits:要移动的位数 (DECIMAL)。
 输出: 
     Value >> Bits:移位后的整数 (DECIMAL)。
 使用方法: 
    1.  将要进行移位操作的整数 (DECIMAL 类型) 连接到 `Value 输入，将要移动的位数 (DECIMAL 类型) 连接到 `Bits 输入。
    2.  从 `Value >> Bits 输出读取移位后的整数 (DECIMAL 类型)。

好的，我们继续最后的部分。

---

 8. 实体操作 (Entity Operations) 

与游戏世界中的物体进行交互。

 8.1. `Position (实体位置) 

 功能:  获取或设置实体在世界坐标系中的位置。
 输入: 
     Entity (ENTITY): 需要操作的实体。
     Position (VECTOR): (可选) 需要设置给实体的新世界坐标位置向量。
 输出: 
     Position (VECTOR): 实体当前的世界坐标位置向量。
 使用方法: 
    1.   获取位置：  仅将目标实体 (ENTITY 类型) 连接到 `Entity 输入，即可从 `Position 输出读取当前的位置向量 (VECTOR 类型)。
    2.   设置位置：  同时将目标实体 (ENTITY 类型) 连接到 `Entity 输入，并将要设置的位置向量 (VECTOR 类型) 连接到 `Position 输入。模块会尝试设置实体的位置，并同时在 `Position 输出当前（理论上是刚设置的）位置。

 8.2. `Angle (实体角度) 

 功能:  获取或设置实体在世界坐标系中的旋转角度 (通常指 Z 轴旋转)。
 输入: 
     Entity (ENTITY): 需要操作的实体。
     Angle (DECIMAL): (可选) 需要设置给实体的新旋转角度值 (单位：度)。
 输出: 
     Angle (DECIMAL): 实体当前的旋转角度值 (单位：度)。
 使用方法: 
    1.   获取角度：  仅将目标实体 (ENTITY 类型) 连接到 `Entity 输入，即可从 `Angle 输出读取当前的旋转角度 (DECIMAL 类型)。
    2.   设置角度：  同时将目标实体 (ENTITY 类型) 连接到 `Entity 输入，并将要设置的角度值 (DECIMAL 类型) 连接到 `Angle 输入。模块会尝试设置实体的角度，并同时在 `Angle 输出当前（理论上是刚设置的）角度。

 8.3. `Size (实体尺寸/缩放) 

 功能:  获取或设置实体各个轴向的缩放比例。
 输入: 
     Entity (ENTITY): 需要操作的实体。
     Size (VECTOR): (可选) 需要设置给实体的新缩放比例向量 (X, Y 分量分别对应 2D 缩放)。
 输出: 
     Size (VECTOR): 实体当前的缩放比例向量。
 使用方法: 
    1.   获取尺寸：  仅将目标实体 (ENTITY 类型) 连接到 `Entity 输入，即可从 `Size 输出读取当前的缩放比例向量 (VECTOR 类型)。
    2.   设置尺寸：  同时将目标实体 (ENTITY 类型) 连接到 `Entity 输入，并将要设置的缩放比例向量 (VECTOR 类型) 连接到 `Size 输入。模块会尝试设置实体的缩放，并同时在 `Size 输出当前（理论上是刚设置的）缩放比例。注意：缩放值为 0 可能导致物体消失。

 8.4. `Velocity (实体速度) 

 功能:  获取或设置实体在世界坐标系中的线速度。
 输入: 
     Entity (ENTITY): 需要操作的实体。
     Velocity (VECTOR): (可选) 需要设置给实体的新速度向量。
 输出: 
     Velocity (VECTOR): 实体当前的速度向量。
 使用方法: 
    1.   获取速度：  仅将目标实体 (ENTITY 类型) 连接到 `Entity 输入，即可从 `Velocity 输出读取当前的速度向量 (VECTOR 类型)。
    2.   设置速度：  同时将目标实体 (ENTITY 类型) 连接到 `Entity 输入，并将要设置的速度向量 (VECTOR 类型) 连接到 `Velocity 输入。模块会尝试设置实体的速度，并同时在 `Velocity 输出当前（理论上是刚设置的）速度。

 8.5. `AngularVelocity (实体角速度) 

 功能:  获取或设置实体的角速度 (通常指 Z 轴旋转速度)。
 输入: 
     Entity (ENTITY): 需要操作的实体。
     Angular Velocity (DECIMAL): (可选) 需要设置给实体的新角速度值 (单位：度/秒 ）
 输出: 
     Angular Velocity (DECIMAL): 实体当前的角速度值(单位：度/秒 ）。
 使用方法: 
    1.   获取角速度：  仅将目标实体 (ENTITY 类型) 连接到 `Entity 输入，即可从 `Angular Velocity 输出读取当前的角速度 (DECIMAL 类型)。
    2.   设置角速度(可选)：  同时将目标实体 (ENTITY 类型) 连接到 `Entity 输入，并将要设置的角速度值 (DECIMAL 类型) 连接到 `Angular Velocity 输入。模块会尝试设置实体的角速度，并同时在 `Angular Velocity 输出实际上的角速度。

 8.6. `MASS 

 功能:  获取一个实体的质量。
 输入: 
     Entity:要获取质量的实体 (ENTITY)。
 输出: 
     Mass:实体的质量 (DECIMAL)。
 使用方法: 
    1.  将要获取质量的实体 (ENTITY 类型) 连接到 `Entity 输入。
    2.  从 `Mass 输出读取实体的质量 (DECIMAL 类型)。

 8.7. add FORCE 

 功能:  对一个实体施加一个力（作用于质心）。
 输入: 
     Entity:要施加力的实体 (ENTITY)。
     Force:要施加的力 (VECTOR)，表示力的大小和方向。
 输出:  无
 使用方法: 
    1.  将要施加力的实体 (ENTITY 类型) 连接到 `Entity 输入。
    2.  将要施加的力 (VECTOR 类型) 连接到 `Force 输入。该模块会立即施加一次力。

8.8. delete (删除物体) 

 功能:  销毁一个实体。
 输入: 
    * `OBJECT (NULL)` (紫色): 要销毁的实体 (ENTITY)。
    * `INPUT (0.00)` (蓝色): 触发信号 (DECIMAL)。当此输入端口接收到的值为 1 时，模块会执行销毁操作；输入为 0 或其他值时，不执行任何操作。
 输出:  无
 使用方法: 
    1.  将要销毁的实体 (ENTITY 类型) 连接到 `OBJECT` 输入端口。
    2.  将一个控制信号（例如，条件判断的结果或按钮触发信号，DECIMAL 类型）连接到 `INPUT` 输入端口。
    3.  只有当 `INPUT` 输入端口的值为 1 时，连接到 `OBJECT` 端口的实体才会被销毁。

 8.9. IDIsValid (实体ID有效性检查) 

 功能:  检查一个输入的实体 ID 是否对应当前游戏中一个有效存在的实体。
 输入: 
     实体ID`: 需要检查的实体 ID 数值 (DECIMAL)。
 输出: 
     是否有效`: 如果该 ID 对应一个有效实体，则输出 1 (true)，否则输出 0 (false) (DECIMAL)。
 使用方法: 
    1.  将需要检查的实体 ID (DECIMAL 类型) 连接到 `实体ID 输入。
    2.  从 `是否有效 端口读取检查结果 (DECIMAL 类型，1 或 0)。

 8.10. `WorldAngleToLocal (世界角度转局部角度) 

 功能:  将一个世界坐标系下的角度转换为相对于指定实体朝向的局部角度。
 输入: 
     参考实体`: 提供局部朝向参考的实体 (ENTITY)。
     世界角度`: 需要转换的世界角度（单位：度） (DECIMAL)。
 输出: 
     局部角度`: 转换后，相对于 `参考实体 朝向的局部角度（单位：度） (DECIMAL)。
 使用方法: 
    1.  将定义局部朝向的实体 (ENTITY 类型) 连接到 `参考实体 输入。
    2.  将需要转换的世界角度 (DECIMAL 类型，度数) 连接到 `世界角度 输入。
    3.  从 `局部角度 端口读取转换得到的局部角度 (DECIMAL 类型，度数)。

 8.11. `LocalAngleToWorld (局部角度转世界角度) 

 功能:  将一个相对于指定实体朝向的局部角度转换为世界坐标系下的角度。
 输入: 
     参考实体`: 定义局部朝向参考的实体 (ENTITY)。
     局部角度`: 需要转换的、相对于 `参考实体 朝向的局部角度（单位：度） (DECIMAL)。
 输出: 
     世界角度`: 转换后的世界角度（单位：度） (DECIMAL)。
 使用方法: 
    1.  将定义局部朝向的实体 (ENTITY 类型) 连接到 `参考实体 输入。
    2.  将需要转换的局部角度 (DECIMAL 类型，度数) 连接到 `局部角度 输入。
    3.  从 `世界角度 端口读取转换得到的世界角度 (DECIMAL 类型，度数)。

 8.12. `LookAt (朝向目标) 

 功能:  控制一个实体旋转，使其朝向另一个实体的位置 (通常是瞬间完成或平滑过渡，取决于实现和 `速度/因子`)。
 输入: 
     自身实体`: 需要旋转以朝向目标的实体 (ENTITY)。
     目标实体`: 被朝向的目标实体 (ENTITY)。
     速度/因子`: 物体移动向目标物体的速度，如果为零物体不会移动到目标物体处
 输出:  无 (这是一个执行动作的模块)。
 使用方法: 
    1.  将需要旋转的实体连接到 `自身实体 输入。
    2.  将被朝向的实体连接到 `目标实体 输入。
    3.  连接一个控制速度或插值的数值到 `速度/因子 输入。

 8.13. `MassCenter (质心位置) 

 功能:  获取指定实体的质心（质量中心）在世界坐标系中的位置。
 输入: 
     实体`: 需要获取质心位置的实体 (ENTITY)。
 输出: 
     质心坐标`: 该实体质心的世界坐标位置向量 (VECTOR)。
 使用方法: 
    1.  将需要获取质心的实体 (ENTITY 类型) 连接到 `实体 输入。
    2.  从 `质心坐标 端口读取该实体的质心位置向量 (VECTOR 类型)。

 8.14. `VelocityAtPosition (指定点速度) 

 功能:  获取一个刚体（实体）上指定世界坐标点的瞬时速度向量（考虑线速度和角速度引起的旋转）。
 输入: 
     实体`: 运动的实体 (ENTITY)。
     世界坐标点`: 实体上需要查询速度的点的当前世界坐标 (VECTOR)。
 输出: 
     速度向量`: 该点在当前时刻的世界速度向量 (VECTOR)。
 使用方法: 
    1.  将目标实体 (ENTITY 类型) 连接到 `实体 输入。
    2.  将需要查询速度的世界坐标点 (VECTOR 类型) 连接到 `世界坐标点 输入。
    3.  从 `速度向量 端口读取该点的瞬时速度 (VECTOR 类型)。

 8.15. `CanBeActivated (可激活检查) 

 功能:  检查指定的实体是否包含可以被激活的组件或机制（例如按钮、引擎等）。
 输入: 
     实体`: 需要检查的实体 (ENTITY)。
 输出: 
     可激活`: 如果实体可以被激活，输出 1 (true)，否则输出 0 (false) (DECIMAL)。
 使用方法: 
    1.  将需要检查的实体 (ENTITY 类型) 连接到 `实体 输入。
    2.  从 `可激活 端口读取检查结果 (DECIMAL 类型，1 或 0)。

 8.16. `Ignite (点燃/状态) 

 功能:  点燃指定的实体，或查询其是否处于点燃状态。
 输入: 
     实体`: 需要操作或查询的实体 (ENTITY)。
     点燃信号`: 输入 1 尝试点燃该实体；输入 0 则不执行点燃操作 (DECIMAL)。
 输出: 
     燃烧状态`: 输出 1 表示实体当前正在燃烧，输出 0 表示未燃烧 (DECIMAL)。
 使用方法: 
    1.  将目标实体 (ENTITY 类型) 连接到 `实体 输入。
    2.  连接一个控制信号 (DECIMAL 类型，通常为 1) 到 `点燃信号 输入来尝试点燃。
    3.  从 `燃烧状态 端口读取实体当前的燃烧状态 (DECIMAL 类型，1 或 0)。

 8.17. `Extinguish (熄灭) 

 功能:  熄灭指定实体上的火焰。
 输入: 
     实体`: 需要被熄灭火焰的实体 (ENTITY)。
     熄灭信号`: 输入 1 来触发熄灭动作 (DECIMAL)。
 输出:  无 (这是一个执行动作的模块)。
 使用方法: 
    1.  将需要熄灭火焰的实体 (ENTITY 类型) 连接到 `实体 输入。
    2.  连接一个触发信号 (DECIMAL 类型，通常为 1) 到 `熄灭信号 输入来执行熄灭。

 8.8. delete (删除物体) 

 功能:  销毁一个实体。
 输入: 
    * `OBJECT (NULL)` (紫色): 要销毁的实体 (ENTITY)。
    * `INPUT (0.00)` (蓝色): 触发信号 (DECIMAL)。当此输入端口接收到的值为 1 时，模块会执行销毁操作；输入为 0 或其他值时，不执行任何操作。
 输出:  无
 使用方法: 
    1.  将要销毁的实体 (ENTITY 类型) 连接到 `OBJECT` 输入端口。
    2.  将一个控制信号（例如，条件判断的结果或按钮触发信号，DECIMAL 类型）连接到 `INPUT` 输入端口。
    3.  只有当 `INPUT` 输入端口的值为 1 时，连接到 `OBJECT` 端口的实体才会被销毁。
8.19. `ADD FORCE AT POSITION` (在指定位置施加力) 

 功能:  对一个实体上的指定局部坐标点施加一个力。
 输入: 
    * `OBJECT (NULL)` (紫色): 要施加力的实体 (ENTITY)。
    * `FORCE (X:0 Y:0 Z:0 W:0)` (绿色): 要施加的力向量 (VECTOR)，表示力的大小和方向。
    * `OFFSET (X:0 Y:0 Z:0 W:0)` (绿色): 相对于实体质心的局部坐标偏移量 (VECTOR)，力将作用于此点。
 输出:  无
 使用方法: 
    1.  将要施加力的实体 (ENTITY 类型) 连接到 `OBJECT` 输入。
    2.  将要施加的力向量 (VECTOR 类型) 连接到 `FORCE` 输入。
    3.  将力的作用点相对于实体质心的偏移向量 (VECTOR 类型) 连接到 `OFFSET` 输入。该模块会立即在该局部位置对实体施加一次力。

 8.20. `COLLISION` (碰撞状态) 

 功能:  获取或设置实体的碰撞是否启用。
 输入: 
    * `OBJECT (NULL)` (紫色): 需要操作的实体 (ENTITY)。
    * `ENABLE COLLISION (0.00)` (蓝色): (可选) 设置碰撞是否启用的信号。输入 1 启用碰撞，输入 0 禁用碰撞。
    * `DISABLE COLLISION (0.00)` (蓝色): (可选) 专门用于禁用碰撞的信号。输入 1 禁用碰撞。 (注：此端口功能可能与 `ENABLE COLLISION` 输入 0 重叠或有特定优先级，通常使用 `ENABLE COLLISION` 更为通用。)
 输出: 
    * `COLLISION ENABLED (0.00)` (蓝色): 实体当前的碰撞启用状态。1 表示已启用，0 表示已禁用 (DECIMAL)。
 使用方法: 
    1.   获取碰撞状态:  仅将目标实体 (ENTITY 类型) 连接到 `OBJECT` 输入，即可从 `COLLISION ENABLED` 输出读取当前的碰撞状态。
    2.   设置碰撞状态: 
        * 通过 `ENABLE COLLISION`: 将目标实体连接到 `OBJECT` 输入，并将控制信号 (1 或 0) 连接到 `ENABLE COLLISION` 输入。
        * 通过 `DISABLE COLLISION`: 将目标实体连接到 `OBJECT` 输入，并将控制信号 (通常为 1) 连接到 `DISABLE COLLISION` 输入以禁用碰撞。
    3.  模块会尝试设置实体的碰撞状态，并同时在 `COLLISION ENABLED` 输出当前状态。

 8.21. `ELEVATION` (实体高度/层级) 

 `ELEVATION` 模块的核心功能是计算指定的**目标坐标点**与**参考实体**的连线，和**世界坐标系 X 轴正方向**之间所形成的**夹角**。角度的范围为 -180° 到 +180°。

*   当目标坐标点位于参考实体的**上方**（相对于世界坐标系的 Y 轴）时，计算出的夹角为**正值**。
*   当目标坐标点位于参考实体的**下方**时，计算出的夹角为**负值**。
*   当目标坐标点与参考实体在 Y 轴上处于同一高度时，若目标点在参考实体 X 轴正方向，则角度为 0°；若在 X 轴负方向，则角度为 180° 或 -180°。

**输入端口：**

*   `OBJECT (NULL)` (紫色): **参考实体 (ENTITY)**。计算角度时，以此实体的位置作为参考点（连线的起点）。
*   `POSITION (X:0 Y:0 Z:0 W:0)` (绿色): **目标坐标 (VECTOR)**。计算角度时，以此坐标点作为连线的终点。通常使用其 X 和 Y 分量进行二维平面角度计算。

**输出端口：**

*   `ANGLE (DEG) (0.00)` (蓝色): **计算出的夹角 (DECIMAL)**。单位为度，范围在 -180° 到 +180°之间。该值表示从参考实体指向目标坐标点的向量与世界X轴正方向之间的有向夹角。
 9. 字符串操作 (String Operations) 
 8.22. `ENTITY ID` (获取实体ID) 

 功能:  获取指定实体的唯一标识符 (ID)。每个在游戏世界中生成的实体通常都有一个独一无二的数字ID。
 输入: 
    * `OBJECT (NULL)` (紫色): 需要获取其ID的实体 (ENTITY)。
 输出: 
    * `ID (0.00)` (蓝色): 该实体的唯一ID号 (DECIMAL)。如果输入未连接实体或实体无效，输出通常为0或一个特定的无效ID值。
 使用方法: 
    1.  将目标实体 (ENTITY 类型) 连接到 `OBJECT` 输入端口。
    2.  从 `ID` 输出端口读取该实体的数字ID (DECIMAL 类型)。这个ID可以用于后续通过 `ID TO ENTITY` 模块重新获取实体引用，或者用于其他需要实体唯一标识的逻辑。

 8.23. `ID TO ENTITY` (ID转实体) 

 功能:  通过实体的唯一标识符 (ID) 来获取该实体的引用。这允许你在知道一个实体ID的情况下，重新在芯片逻辑中“找到”并操作这个实体，即使你没有直接的实体连接。
 输入: 
    * `ID (0.00)` (蓝色): 要转换为实体引用的实体ID号 (DECIMAL)。
 输出: 
    * `OBJECT (NULL)` (紫色): 与输入ID对应的实体 (ENTITY)。如果输入的ID无效或没有实体对应这个ID（例如实体已被销毁），则输出 NULL。
 使用方法: 
    1.  将包含目标实体ID的数值 (DECIMAL 类型) 连接到 `ID` 输入端口。
    2.  从 `OBJECT` 输出端口获取对该实体的引用 (ENTITY 类型)。在使用前，最好检查输出是否为 NULL，以确保实体仍然有效。
    3.  此模块常与 `ENTITY ID` 配合使用，或者用于当实体ID通过其他方式（如外部输入、保存的数据）获得时。

 8.24. `ADD ANGULAR FORCE` (施加角力/扭矩) 

 功能:  对指定的实体施加一个角力（也称为扭矩），使其产生旋转加速度。
 输入: 
    * `OBJECT (NULL)` (紫色): 需要施加角力的实体 (ENTITY)。
    * `ANGULAR FORCE (0.00)` (蓝色): 要施加的角力大小 (DECIMAL)。这个值通常代表扭矩的大小。正值和负值可能对应不同的旋转方向（例如，顺时针或逆时针，具体取决于游戏引擎的坐标系和物理实现）。
 输出:  无 (这是一个执行动作的模块)。
 使用方法: 
    1.  将目标实体 (ENTITY 类型) 连接到 `OBJECT` 输入端口。
    2.  将代表角力大小的数值 (DECIMAL 类型) 连接到 `ANGULAR FORCE` 输入端口。
    3.  模块会对实体在下一个芯片刷新周期之前施加一定的角力（可以理解为一直施加角力）。持续施加需要持续的信号或循环逻辑。注意角力的方向性，可能需要通过正负值来控制。
处理文本信息。

 9.1. `Add STRING 

 功能:  将两个字符串连接起来。
 输入: 
     A:第一个字符串 (STRING)。
     B:第二个字符串 (STRING)。
 输出: 
     A + B:连接后的字符串 (STRING)。
 使用方法: 
    1.  将需要连接的两个字符串 (STRING 类型) 连接到 `A 和 `B 输入。
    2.  从 `A + B 输出读取连接后的字符串 (STRING 类型)。

 9.2. `STRING LENGTH 

 功能:  获取一个字符串的长度。
 输入: 
     String:要获取长度的字符串 (STRING)。
 输出: 
     Length:字符串的长度 (DECIMAL)。
 使用方法: 
    1.  将要获取长度的字符串 (STRING 类型) 连接到 `String 输入。
    2.  从 `Length 输出读取字符串的长度 (DECIMAL 类型)。

 9.3. `SUBSTRING 

 功能:  从一个字符串中提取子字符串。
 输入: 
     String:要提取子字符串的字符串 (STRING)。
     Start:起始位置 (DECIMAL，通常从 0 或 1 开始，取决于实现)。
     Length:要提取的长度 (DECIMAL)。
 输出: 
     Substring:提取的子字符串 (STRING)。
 使用方法: 
    1.  将要提取子字符串的字符串 (STRING 类型) 连接到 `String 输入，将起始位置 (DECIMAL 类型) 连接到 `Start 输入，将要提取的长度 (DECIMAL 类型) 连接到 `Length 输入。
    2.  从 `Substring 输出读取提取的子字符串 (STRING 类型)。

 9.4. `REPLACE STRING 

 功能:  在一个字符串中替换所有出现的指定子字符串。
 输入: 
     String:要进行替换的字符串 (STRING)。
     Old Value:要被替换的子字符串 (STRING)。
     New Value:用于替换的新字符串 (STRING)。
 输出: 
     Replaced String:替换后的字符串 (STRING)。
 使用方法: 
    1.  将要进行替换的字符串 (STRING 类型) 连接到 `String 输入，将要被替换的子字符串 (STRING 类型) 连接到 `Old Value 输入，将用于替换的新字符串 (STRING 类型) 连接到 `New Value 输入。
    2.  从 `Replaced String 输出读取替换后的字符串 (STRING 类型)。

 9.5. `TO UPPERCASE 

 功能:  将一个字符串转换为大写。
 输入: 
     String:要转换为大写的字符串 (STRING)。
 输出: 
     Uppercase String:转换后的大写字符串 (STRING)。
 使用方法: 
    1.  将要转换为大写的字符串 (STRING 类型) 连接到 `String 输入。
    2.  从 `Uppercase String 输出读取转换后的大写字符串 (STRING 类型)。

 9.6. `TO LOWERCASE 

 功能:  将一个字符串转换为小写。
 输入: 
     String:要转换为小写的字符串 (STRING)。
 输出: 
     Lowercase String:转换后的小写字符串 (STRING)。
 使用方法: 
    1.  将要转换为小写的字符串 (STRING 类型) 连接到 `String 输入。
    2.  从 `Lowercase String 输出读取转换后的小写字符串 (STRING 类型)。

 9.7. `TRIM STRING 

 功能:  去除一个字符串开头和结尾的空白字符（空格、制表符等）。
 输入: 
     String:要去除空白字符的字符串 (STRING)。
 输出: 
     Trimmed String:去除空白字符后的字符串 (STRING)。
 使用方法: 
    1.  将要去除空白字符的字符串 (STRING 类型) 连接到 `String 输入。
    2.  从 `Trimmed String 输出读取去除空白字符后的字符串 (STRING 类型)。

 9.8. `TO NUMBER 

 功能:  将一个字符串尝试转换为数值 (DECIMAL 或 VECTOR)。
 输入: 
     String:要转换的字符串 (STRING)。
 输出: 
    * 转换后的数值 (DECIMAL/VECTOR)。如果字符串不能解析为有效的数值，通常输出 0 或 (0,0,0,0) 向量。
 使用方法: 
    1.  将要转换的字符串 (STRING 类型) 连接到 `String 输入。
    2.  从输出读取转换后的数值 (DECIMAL/VECTOR 类型)。

 9.9. `TO STRING 

 功能:  将一个数值 (DECIMAL) 转换为字符串。
 输入: 
     Number:要转换的数值 (DECIMAL)。
 输出: 
    * 转换后的字符串 (STRING)。
 使用方法: 
    1.  将要转换的数值 (DECIMAL 类型) 连接到 `Number 输入。
    2.  从输出读取转换后的字符串 (STRING 类型)。
 9.10. `TO ASCII` (字符转ASCII码) 

 功能:  将输入字符串的第一个字符转换为其对应的 ASCII (或Unicode) 数值。
 输入: 
    * `VALUE (NULL)` (黄色): 包含至少一个字符的字符串 (STRING)。
    * `INDEX (0.00)` (蓝色): (可选) 指定字符串中要转换的字符的索引（从0开始）。如果未连接或为0，则转换第一个字符。
 输出: 
    * `ASCII (0.00)` (蓝色): `VALUE` 字符串中在 `INDEX` 位置的字符所对应的 ASCII (或Unicode) 数值 (DECIMAL)。如果字符串为空或索引越界，结果可能是0或错误。
 使用方法: 
    1.  将包含待转换字符的字符串 (STRING 类型) 连接到 `VALUE` 输入。
    2.  (可选) 将指定字符索引的数值 (DECIMAL 类型) 连接到 `INDEX` 输入。
    3.  从 `ASCII` 输出读取字符的 ASCII (或Unicode) 码值 (DECIMAL 类型)。

 9.11. `FROM ASCII` (ASCII码转字符) 

 功能:  将输入的 ASCII (或Unicode) 数值转换为对应的字符，并输出为单个字符的字符串。
 输入: 
    * `ASCII (0.00)` (蓝色): 要转换为字符的 ASCII (或Unicode) 数值 (DECIMAL)。
 输出: 
    * `SYMBOL (NULL)` (黄色): 由输入的 `ASCII` 码值转换得到的单个字符组成的字符串 (STRING)。如果输入的数值无效，结果可能是空字符串或特定错误字符。
 使用方法: 
    1.  将代表字符的 ASCII (或Unicode) 码值 (DECIMAL 类型) 连接到 `ASCII` 输入。
    2.  从 `SYMBOL` 输出读取转换后的单个字符字符串 (STRING 类型)。
9.12. FIND (查找字符串)
功能: 在一个主字符串中搜索指定的子字符串，并输出其首次出现的起始索引。如果未找到子字符串，则输出 -1。

输入:

VALUE (黄色): 要在其中进行搜索的主字符串 (STRING)。
TEXT TO FIND (黄色): 需要在 VALUE 中查找的子字符串 (STRING)。
输出:

INDEX (蓝色): TEXT TO FIND 在 VALUE 中首次出现的从零开始的起始索引 (DECIMAL)。如果 TEXT TO FIND 未在 VALUE 中找到，则输出 -1。
使用方法:

将需要进行搜索的主字符串 (STRING 类型) 连接到 VALUE 输入端口。
将要查找的子字符串 (STRING 类型) 连接到 TEXT TO FIND 输入端口。
从 INDEX 输出端口读取查找到的子字符串的起始索引 (DECIMAL 类型)。
例如：如果 VALUE 是 "Hello World" 且 TEXT TO FIND 是 "World"，则 INDEX 输出将为 6。
如果 VALUE 是 "Hello World" 且 TEXT TO FIND 是 "earth"，则 INDEX 输出将为 -1。
如果 VALUE 是 "banana" 且 TEXT TO FIND 是 "na", 则 INDEX 输出将为 2 (指向第一个 "na")。
如果 TEXT TO FIND 为空字符串 ""，则 INDEX 输出将为 0。
 10. 输入/传感器 (Input/Sensors) 

获取游戏环境信息。

 10.1. `Detector (侦测器 - 外部部件) 

 注意：  侦测器本身不是芯片内的模块，而是游戏中的一个物理部件，但它提供可以连接到芯片的输出端口。
 功能:  检测与其连接的实体发生的碰撞。
 输出端口: 
     ENTITY (ENTITY): 侦测器自身（或连接到侦测器的实体）。
     DIST (DECIMAL): 碰撞的距离。数值越小，碰撞越近 (可能为 0 或负数表示接触/穿透)。
     TRIGGER (DECIMAL): 触发信号。当发生碰撞时，输出 1；否则输出 0。
     HIT POINT (VECTOR): 碰撞点。一个二维向量，指示碰撞发生的具体世界坐标位置 (X, Y)。
     HIT NORMAL (VECTOR): 碰撞法线。一个二维向量，指示碰撞表面的方向 (X, Y)，通常指向远离碰撞表面的方向。
     HIT ENTITY (ENTITY): 与侦测器连接的实体发生碰撞的另一个实体。
     ACTIVATION (DECIMAL): 激活信号。通常持续输出 1，表示侦测器处于激活（可检测）状态。
 使用方法:  将侦测器的相应输出端口连接到芯片模块的输入端口，以利用碰撞信息。

 10.2. `TIME 

 功能:  提供与游戏时间相关的数值。
 输入:  无
 输出: 
     TIME (DECIMAL): 当前游戏自启动以来经过的总时间，通常以秒为单位。
     DELTA TIME (DECIMAL): 上一帧到当前帧的时间间隔（帧耗时），通常以秒为单位。对于需要平滑、帧率无关的运动或计时非常有用。
     SIN TIME (DECIMAL): `sin(TIME)`，当前游戏时间的正弦值，可用于创建周期性效果。
     COS TIME (DECIMAL): `cos(TIME)`，当前游戏时间的余弦值，可用于创建周期性效果。
 使用方法: 
    1.  将 `TIME 输出连接到需要使用游戏总时间的地方。
    2.  将 `DELTA TIME 输出连接到需要进行帧率补偿的地方（例如，速度 = 基准速度  DELTA TIME`）。
    3.  将 `SIN TIME 和 `COS TIME 输出用于创建周期性的运动、颜色变化等。

 11. 实用工具 (Utility) 

辅助功能。

 11.1. `Sticker (标签/注释) 

 功能:  在芯片编辑器画布上显示一段注释文本，用于标记、说明或组织芯片逻辑，不参与任何运算。
 输入:  无。
 输出:  无。
 使用方法: 
    1.  在芯片编辑器中添加 `Sticker 模块。
    2.  选中该模块，在属性面板中编辑其 "Header" (标题) 和 "Text" (内容) 字段来自定义显示的文本。
 11.2. `ACCUMULATOR` (累加器) 

 功能:  将输入的数值累加到一个内部总和上，并可以重置。
 输入: 
    * `NUMBER (0.00)` (蓝色): 每一帧（或每次触发，取决于具体实现）要加到累加值上的数值 (DECIMAL)。
    * `RESET (0.00)` (蓝色): 重置信号 (DECIMAL)。当此输入为 1 时，累加器的总和将重置为 0（或其他初始值，通常为0）。
 输出: 
    * `RESULT (0.00)` (蓝色): 当前的累加总和 (DECIMAL)。
 使用方法: 
    1.  将需要累加的数值流 (DECIMAL 类型) 连接到 `NUMBER` 输入。
    2.  (可选) 连接一个重置信号 (DECIMAL 类型，1 为重置) 到 `RESET` 输入，以在需要时清零累加器。
    3.  从 `RESULT` 输出读取当前的累加总和。

 11.3. `COUNTER` (计数器) 

 功能:  根据增量和减量信号来增加或减少一个内部计数值，并可以重置。
 输入: 
    * `NUMBER (0.00)` (蓝色): (可选，可能用于设置初始值或直接设置计数值，具体取决于模块设计，但图片上未直接显示其典型用法，一般计数器不从此口输入计数值，而是通过增/减信号操作内部值。 可能性最大的用途是，如果不连接增减量，此端口可能作为直接设置值，或与复位后的初始值有关 )。
    * `INCREMENT (0.00)` (蓝色): 增加信号 (DECIMAL)。当此输入为 1 时（通常是上升沿触发或持续为1时每帧增加），计数器的值增加1（或预设的步长）。
    * `DECREMENT (0.00)` (蓝色): 减少信号 (DECIMAL)。当此输入为 1 时（触发方式同INCREMENT），计数器的值减少1（或预设的步长）。
    * `RESET (0.00)` (蓝色): 重置信号 (DECIMAL)。当此输入为 1 时，计数器的值将重置为初始值（通常为 0）。
 输出: 
    * `RESULT (0.00)` (蓝色): 当前的计数值 (DECIMAL)。
 使用方法: 
    1.  连接触发增加的信号 (DECIMAL 类型) 到 `INCREMENT` 输入。
    2.  连接触发减少的信号 (DECIMAL 类型) 到 `DECREMENT` 输入。
    3.  (可选) 连接一个重置信号 (DECIMAL 类型，1 为重置) 到 `RESET` 输入。
    4.  从 `RESULT` 输出读取当前的计数值。

 11.4. `DELAY` (延迟) 

 功能:  将输入信号延迟指定的时间或帧数后输出。
 输入: 
    * `NUMBER (0.00)` (蓝色): 需要被延迟的输入数值 (DECIMAL)。
    * `DELAY (0.00)` (蓝色): 延迟时间（单位通常是秒）或延迟帧数 (DECIMAL)。
    * `ENABLE (0.00)` (蓝色): (可选) 启用信号 (DECIMAL)。当为 1 时，延迟功能工作；为 0 时，可能直接输出输入值或保持上一个延迟值，具体行为需测试。
    * `RESET (0.00)` (蓝色): (可选) 重置信号 (DECIMAL)。当为 1 时，可能会清除延迟队列或将输出重置为某个初始状态。
    * `HOLD (0.00)` (蓝色): (可选) 保持信号 (DECIMAL)。当为 1 时，可能会暂停延迟计时或保持当前输出值不变。
 输出: 
    * `RESULT (0.00)` (蓝色): 经过指定延迟后的 `NUMBER` 值 (DECIMAL)。
 使用方法: 
    1.  将需要延迟的数值信号 (DECIMAL 类型) 连接到 `NUMBER` 输入。
    2.  将定义延迟长度的数值 (DECIMAL 类型) 连接到 `DELAY` 输入。
    3.  (可选) 使用 `ENABLE`, `RESET`, `HOLD` 端口来控制延迟模块的行为。
    4.  从 `RESULT` 输出读取延迟后的信号。

 11.5. `DELTA PREVIOUS` (与上一帧差值) 

 功能:  计算当前帧的输入值与上一帧输入值之间的差值。
 输入: 
    * `INPUT (0.00)` (蓝色): 当前帧的输入数值 (DECIMAL)。
 输出: 
    * `RESULT (0.00)` (蓝色): `当前帧INPUT值` - `上一帧INPUT值` (DECIMAL)。
 参数设置 (下拉框): 
    * `DECIMAL`: 指示输入和输出是数值类型。
 使用方法: 
    1.  将需要计算帧间差值的数值信号 (DECIMAL 类型) 连接到 `INPUT` 输入。
    2.  从 `RESULT` 输出读取当前帧输入值与上一帧输入值的差。第一帧的差值通常为0或输入值本身。
 12. 其他重要信息 

 12.1. 数据类型与端口颜色 

 ERROR （红色）： 错误类型，表示连接或配置存在问题。
 DECIMAL （蓝色）： 数值类型，可以是整数或浮点数。
 VECTOR （绿色）： 四维向量类型 (X, Y, Z, W)，用于表示位置、方向、速度、颜色 (RGBA) 等。即使在 2D 游戏中，通常也使用四维向量，Z 和 W 分量可能未使用或有特定含义。
 STRING （黄色）： 字符串类型，用于处理文本信息。
 ENTITY （紫色）： 实体类型，代表游戏世界中的一个具体物体（角色、道具、方块等）。

 12.2. ENTITY 类型使用要点 

 是什么：  `ENTITY 是一种数据类型，可以看作是指向游戏中某个物体的“遥控器”或引用。
 如何获取： 
    1.   芯片参数：  在芯片编辑器中添加 `ENTITY 类型的参数（例如，命名为 `TargetEntity`）。然后在游戏中选中芯片，通过属性面板将游戏世界中的一个实体连接到这个参数端口。
    2.   模块输出：  某些模块（如 `Detector 的 `HIT ENTITY 端口）可以直接输出 `ENTITY 类型的数据。
 如何使用：  将获取到的 `ENTITY 数据连接到各种实体操作模块（如 `Position`, `Velocity`, `add FORCE`, `delete 等）的 `Entity 输入端口，以读取该实体的属性或对其施加影响。

 12.3. 节点框颜色（芯片编辑器内） 

 DEFAULT （白色）： 默认状态，表示节点正常。
 WARNING （黄色）： 警告状态，可能表示存在潜在问题（例如，类型不完全匹配但可转换），通常不影响运行。
 ERROR （红色）： 错误状态，表示存在严重错误（例如，类型完全不匹配、缺少输入），可能导致芯片无法正常工作。
 重要：  芯片的连接 不能构成循环 （即一个模块的输出不能直接或间接地连接回自身的任何输入端口）。编辑器通常会检测并阻止或报错。

 13. 结语 

---
以上就是本芯片模块指南的主要内容。
掌握这些模块的关键在于实践， 甜瓜联合科技  鼓励您现在就动手尝试！
遇到问题或想分享创意？欢迎加入  QQ 交流群：223577168 ，与大家一起交流进步。
*本指南内容基于《甜瓜游乐场》v27.5 编写。*
祝您在芯片世界中创造无限乐趣！
——  甜瓜联合科技  敬上
14.ai工具。你需要提供一个标准的、单一的JSON对象。
这个JSON对象必须包含两个顶级键：`"nodes"` 和 `"edges"`。
**1. "nodes" 数组：**

`"nodes"` 是一个JSON数组，其中每个元素都是一个JSON对象，代表芯片中的一个模块（节点）。每个节点对象必须包含以下键：

  * `"id"`: (字符串) 节点的唯一标识符。例如: `"const_input_1"`, `"main_adder_module"`。请确保在整个芯片描述中此ID是唯一的。
  * `"type"`: (字符串) 模块的功能类型名称。这个名称由你根据模块的功能来定义，力求清晰。例如: `"Constant (Decimal)"`, `"ADD"`, `"PlayerSensor"`, `"ColorMixer"`。
  * `"label"`: (字符串，可选) 用户为这个模块实例指定的显示名称或标签。例如: `"玩家初始速度"`, `"颜色混合器"`, `"主要逻辑触发"`。如果模块没有特定标签，可以为空字符串 `""`。
  * `"attrs"`: (JSON对象，可选) 模块的特定属性或配置值。
      * 示例：对于一个输出固定数字的模块，可能是 `{"value": 10.5}`。
      * 示例：对于一个“输入参数”类型的模块，可能是 `{"name": "#玩家血量", "data_type": "DECIMAL"}`。
      * 示例：对于一个“标签/注释”模块，可能是 `{"Header": "重要区域", "Text": "这部分逻辑控制玩家移动。\n请勿轻易修改。"}`。
  * `"inputs"`: (JSON数组，可选) 定义该模块的输入端口。如果模块没有输入端口（例如常量模块），此数组可以为空 `[]` 或省略。数组中的每个元素都是一个代表输入端口的JSON对象，包含：
      * `"name"`: (字符串) 输入端口的名称，例如 `"A"`, `"B"`, `"Value"`, `"TriggerSignal"`。
      * `"type"`: (字符串) 该输入端口期望接收的数据类型。常见数据类型有：`DECIMAL` (数值), `STRING` (字符串), `VECTOR` (向量/颜色), `ENTITY` (实体), `BOOLEAN` (布尔值，通常用DECIMAL的0或1表示), `ANY` (任意类型)。
  * `"outputs"`: (JSON数组，可选) 定义该模块的输出端口。如果模块没有输出端口（例如某些执行动作的模块），此数组可以为空 `[]` 或省略。数组中的每个元素都是一个代表输出端口的JSON对象，包含：
      * `"name"`: (字符串) 输出端口的名称，例如 `"OUTPUT"`, `"A+B"`, `"X"`, `"IsColliding"`。
      * `"type"`: (字符串) 该输出端口输出的数据类型 (同上)。

**2. "edges" 数组：**

`"edges"` 是一个JSON数组，其中每个元素都是一个JSON对象，代表模块之间的一条连接（边）。每个连接对象必须包含以下键：

  * `"from_node"`: (字符串) 连接线起始节点的 `id` (必须与`nodes`数组中某个节点的`id`对应)。
  * `"from_port"`: (字符串) 连接线在起始节点上的输出端口的 `name`。
  * `"to_node"`: (字符串) 连接线目标节点的 `id` (必须与`nodes`数组中某个节点的`id`对应)。
  * `"to_port"`: (字符串) 连接线在目标节点上的输入端口的 `name`。

**模块定义参考示例 (你可以基于这些示例理解如何定义其他模块的端口和属性)：**

  * **Constant (Decimal) (常量数值)** [cite: 172]
      * `type`: "Constant (Decimal)"
      * `attrs`: `{"value": 数字}`
      * `outputs`: `[{"name": "OUTPUT", "type": "DECIMAL"}]`
  * **Constant (String) (常量字符串)** [cite: 173]
      * `type`: "Constant (String)"
      * `attrs`: `{"value": "文本"}`
      * `outputs`: `[{"name": "OUTPUT", "type": "STRING"}]`
  * **Constant (Vector) (常量向量/颜色)** [cite: 174]
      * `type`: "Constant (Vector)"
      * `attrs`: `{"value": "X:数字 Y:数字 Z:数字 W:数字"}`
      * `outputs`: `[{"name": "OUTPUT", "type": "VECTOR"}]`
  * **INPUT (输入参数)** [cite: 174]
      * `type`: "INPUT"
      * `attrs`: `{"name": "#参数名", "data_type": "DECIMAL|STRING|VECTOR|ENTITY"}`
      * `outputs`: `[{"name": "OUTPUT", "type": "应与attrs中的data_type一致"}]`
  * **OUTPUT (输出端口)** [cite: 176]
      * `type`: "OUTPUT"
      * `attrs`: `{"name": "#输出名", "data_type": "DECIMAL|STRING|VECTOR|ENTITY"}`
      * `inputs`: `[{"name": "INPUT", "type": "应与attrs中的data_type一致"}]`
  * **ADD (加法)** [cite: 182]
      * `type`: "ADD"
      * `inputs`: `[{"name": "A", "type": "DECIMAL"}, {"name": "B", "type": "DECIMAL"}]`
      * `outputs`: `[{"name": "A+B", "type": "DECIMAL"}]`
  * **VARIABLE (变量)** [cite: 180]
      * `type`: "VARIABLE"
      * `attrs`: `{"name": "#变量名", "var_type": "DECIMAL|STRING|VECTOR|ENTITY"}` (var\_type 定义了变量存储和端口的数据类型)
      * `inputs`: `[{"name": "INPUT", "type": "应与attrs中的var_type一致"}, {"name": "SET", "type": "BOOLEAN"}]`
      * `outputs`: `[{"name": "VAR", "type": "应与attrs中的var_type一致"}]`
  * **TIME (时间)** [cite: 293]
      * `type`: "TIME"
      * `outputs`: `[ {"name": "TIME", "type": "DECIMAL"}, {"name": "DELTA TIME", "type": "DECIMAL"}, {"name": "SIN TIME", "type": "DECIMAL"}, {"name": "COS TIME", "type": "DECIMAL"} ]`
  * **Sticker (标签/注释)** [cite: 294]
      * `type`: "Sticker"
      * `attrs`: `{"Header": "可选标题", "Text": "注释内容，可包含\\n换行"}`
      * `inputs`: `[]`
      * `outputs`: `[]`
  * **Split (分解向量/颜色)** (这是一个假设的模块，如果游戏中存在类似功能，请参照)
      * `type`: "Split Vector"
      * `label`: "分解向量"
      * `inputs`: `[{"name": "VectorIn", "type": "VECTOR"}]`
      * `outputs`: `[ {"name": "X", "type": "DECIMAL"}, {"name": "Y", "type": "DECIMAL"}, {"name": "Z", "type": "DECIMAL"}, {"name": "W", "type": "DECIMAL"} ]`

**重要指令：**

  * JSON 内容必须严格遵守 JSON 语法。
  * 所有字符串值（包括 `id`, `type`, `label`, `name`, 以及 `attrs` 中的文本值）都必须用双引号 `"` 包裹。
  * 确保 `from_port` 和 `to_port` 的名称与你在对应节点的 `outputs` 和 `inputs` 数组中定义的端口 `name` 完全一致。
  * 对于没有输入或输出的模块，对应的 `inputs` 或 `outputs` 数组应为空数组 `[]`INPUT 和 OUTPUT 节点，其用户定义的名称和数据类型必须放在 attrs 对象内，键分别为 name 和 data_type。
edges 数组中的对象必须使用 from_node 和 to_node 作为键。
edges 中的 from_port 和 to_port 必须是纯粹的端口名，不能有额外字符如 (0.00)。示例请求：{
  "nodes": [
    {
      "id": "time_source",
      "type": "TIME",
      "label": "游戏时间源",
      "attrs": {},
      "inputs": [],
      "outputs": [
        {"name": "TIME", "type": "DECIMAL"},
        {"name": "DELTA TIME", "type": "DECIMAL"},
        {"name": "SIN TIME", "type": "DECIMAL"},
        {"name": "COS TIME", "type": "DECIMAL"}
      ]
    },
    {
      "id": "player_pos_const",
      "type": "Constant (Vector)",
      "label": "玩家初始位置",
      "attrs": { "value": "X:10 Y:20 Z:0 W:1" },
      "inputs": [],
      "outputs": [{"name": "OUTPUT", "type": "VECTOR"}]
    },
    {
      "id": "split_player_pos",
      "type": "Split", 
      "label": "分解玩家位置",
      "attrs": {},
      "inputs": [{"name": "Vector", "type": "VECTOR"}],
      "outputs": [
        {"name": "X", "type": "DECIMAL"},
        {"name": "Y", "type": "DECIMAL"},
        {"name": "Z", "type": "DECIMAL"},
        {"name": "W", "type": "DECIMAL"}
      ]
    },
    {
      "id": "output_delta_time",
      "type": "OUTPUT",
      "label": "帧间隔",
      "attrs": { "name": "#deltaTime", "data_type": "DECIMAL" },
      "inputs": [{"name": "INPUT", "type": "DECIMAL"}],
      "outputs": []
    },
    {
      "id": "output_player_x",
      "type": "OUTPUT",
      "label": "玩家X坐标",
      "attrs": { "name": "#playerX", "data_type": "DECIMAL" },
      "inputs": [{"name": "INPUT", "type": "DECIMAL"}],
      "outputs": []
    },
    {
      "id": "greeting_message",
      "type": "Constant (String)",
      "label": "问候语",
      "attrs": {"value": "多端口测试"},
      "inputs": [],
      "outputs": [{"name": "OUTPUT", "type": "STRING"}]
    },
    {
      "id": "show_greeting",
      "type": "OUTPUT",
      "label": "显示问候",
      "attrs": {"name": "#greeting", "data_type": "STRING"},
      "inputs": [{"name": "INPUT", "type": "STRING"}],
      "outputs": []
    }
  ],
  "edges": [
    { "from_node": "time_source", "from_port": "DELTA TIME", "to_node": "output_delta_time", "to_port": "INPUT" },
    { "from_node": "player_pos_const", "from_port": "OUTPUT", "to_node": "split_player_pos", "to_port": "Vector" },
    { "from_node": "split_player_pos", "from_port": "X", "to_node": "output_player_x", "to_port": "INPUT" },
    { "from_node": "greeting_message", "from_port": "OUTPUT", "to_node": "show_greeting", "to_port": "INPUT"}
  ]
}

